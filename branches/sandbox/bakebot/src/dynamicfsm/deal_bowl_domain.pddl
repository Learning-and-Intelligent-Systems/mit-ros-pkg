(define (domain deal-bowl)
	(:predicates (INGRED ?x) 
				 (GRIPPER ?x) 
				 (carry ?x ?y)
				 (free ?x)
				 (poured-out ?x)
				 (in-transit ?x)
				 (on-table ?x)
				 (over-mb ?x)
				 (inverted ?x)
				 (cardinal ?x)
				 (randomp ?x)
				 (done ?x)
				 (reset ?x))
	(:action grab 
		:parameters (?x ?y)
		:precondition (and (INGRED ?x) 
						   (GRIPPER ?y) 
						   (reset ?y)
						   (free ?y))
		:effect (and (carry ?y ?x) 
					 (not (free ?y))
					 (not (reset ?y))))
	(:action lift 
		:parameters (?x ?y) 
		:precondition (and (INGRED ?x) (GRIPPER ?y) 
						   (carry ?y ?x))
		:effect (and (in-transit ?x)
					 (not (on-table ?x))
                     (not (cardinal ?x))
					 (randomp ?x)))
	(:action rotate-to-known
		:parameters (?x ?y) 
		:precondition (and (INGRED ?x) (GRIPPER ?y) 
						   (carry ?y ?x))
		:effect (and (not (randomp ?x))
					 (cardinal ?x)))
	(:action transit
		:parameters (?x ?y) 
		:precondition (and (INGRED ?x) (GRIPPER ?y) 
						   (carry ?y ?x)
						   (in-transit ?x))
		:effect (and (over-mb ?x)))
	(:action pour
		:parameters (?x ?y) 
		:precondition (and (INGRED ?x) (GRIPPER ?y) 
						   (carry ?y ?x)
						   (in-transit ?x)
						   (over-mb ?x)
						   (cardinal ?x))
		:effect (and (inverted ?x)
					 (poured-out ?x)))
	(:action revert
		:parameters (?x ?y) 
		:precondition (and (INGRED ?x) (GRIPPER ?y) 
						   (carry ?y ?x)
						   (in-transit ?x))
		:effect (and (not (inverted ?x))
					 (cardinal ?x)))
	(:action dump
		:parameters (?x ?y) 
		:precondition (and (INGRED ?x) (GRIPPER ?y) 
						   (carry ?y ?x)
                           (not (inverted ?x))
						   (in-transit ?x))
		:effect (and (done ?x)
					 (not (carry ?y ?x))
					 (not (in-transit ?x))
					 (free ?y)))
	(:action reset-arm
		:parameters (?x)
		:precondition (and (GRIPPER ?x)
						   (free ?x))
		:effect (reset ?x))
			
)
