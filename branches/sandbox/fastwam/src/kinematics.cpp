#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <bingham/util.h>
#include "kinematics.h"

// warning: keep this at the bottom of the includes!
#include <lapacke.h>



//-------------- Kinematics ----------------//


double *joints_to_paddle(double *joint_angles)
{
  double P[4] = {0,0,.1,1};   // paddle position
  double N[4] = {.1,0,.1,1};  // paddle normal

  double **A = new_matrix2(4,4);

  for(int i = 7; i > 0; i--) {

    double a, alpha, d;
    switch(i) {
    case 1: a = 0; alpha = -M_PI/2; d = 0; break;
    case 2: a = 0; alpha = M_PI/2; d = 0; break;
    case 3: a = 0.045; alpha = -M_PI/2; d = 0.55; break;
    case 4: a = -0.045; alpha = M_PI/2; d = 0; break;
    case 5: a = 0; alpha = -M_PI/2; d = 0.3; break;
    case 6: a = 0; alpha = M_PI/2; d = 0; break;
    case 7: a = 0; alpha = 0; d = 0.060; break;
    default: a = 0; alpha = 0; d = 0; break;
    }
    double c = cos(joint_angles[i-1]);
    double s = sin(joint_angles[i-1]);

    double A_data[16] = {c, -s*cos(alpha), s*sin(alpha), a*c, s, c*cos(alpha), -c*sin(alpha), a*s,
			 0, sin(alpha), cos(alpha), d, 0, 0, 0, 1};
    memcpy(A[0], A_data, 16*sizeof(double));
    matrix_vec_mult(P,A,P,4,4);
    matrix_vec_mult(N,A,N,4,4);
  }

  double A_data[16] = {1,  0,  0, -.44, 0,  0,  1,  .28, 0, -1,  0,  .50, 0,  0,  0,  1};
  memcpy(A[0], A_data, 16*sizeof(double));
  matrix_vec_mult(P,A,P,4,4);
  matrix_vec_mult(N,A,N,4,4);

  sub(N,N,P,3);
  normalize(N,N,3);

  double *paddle_pose;
  safe_calloc(paddle_pose, 6, double);
  paddle_pose[0] = P[0];
  paddle_pose[1] = P[1];
  paddle_pose[2] = P[2];
  paddle_pose[3] = N[0];
  paddle_pose[4] = N[1];
  paddle_pose[5] = N[2];

  //cleanup
  free_matrix2(A);

  return paddle_pose;
}


double **paddle_jacobian(double *joint_angles)
{
  double c1 = cos(joint_angles[0]);
  double c2 = cos(joint_angles[1]);
  double c3 = cos(joint_angles[2]);
  double c4 = cos(joint_angles[3]);
  double c5 = cos(joint_angles[4]);
  double c6 = cos(joint_angles[5]);
  double c7 = cos(joint_angles[6]);

  double s1 = sin(joint_angles[0]);
  double s2 = sin(joint_angles[1]);
  double s3 = sin(joint_angles[2]);
  double s4 = sin(joint_angles[3]);
  double s5 = sin(joint_angles[4]);
  double s6 = sin(joint_angles[5]);
  double s7 = sin(joint_angles[6]);

  double **J = new_matrix2(6,7);

  J[0][0] = (-c1*((9*s3)/200. + s3*(s4*((4*c6)/25. + .3) - (9*c4)/200. + (4*c4*c5*s6)/25.) + (4*c3*s5*s6)/25.)
	    - s1*(c2*((9*c3)/200. + c3*(s4*((4*c6)/25. + 3/10.) - (9*c4)/200. + (4*c4*c5*s6)/25.) - (4*s3*s5*s6)/25.)
		  + s2*((9*s4)/200. + c4*((4*c6)/25. + .3) - (4*c5*s4*s6)/25. + 11/20.)));
  J[0][1] = (-c1*(s2*((9*c3)/200. + c3*(s4*((4*c6)/25. + 3/10.) - (9*c4)/200. + (4*c4*c5*s6)/25.) - (4*s3*s5*s6)/25.)
		 - c2*((9*s4)/200. + c4*((4*c6)/25. + 3/10.) - (4*c5*s4*s6)/25. + 11/20.)));
  J[0][2] = (-s1*((9*c3)/200. + c3*(s4*((4*c6)/25. + 3/10.) - (9*c4)/200. + (4*c4*c5*s6)/25.) - (4*s3*s5*s6)/25.)
	    - c1*c2*((9*s3)/200. + s3*(s4*((4*c6)/25. + 3/10.) - (9*c4)/200. + (4*c4*c5*s6)/25.) + (4*c3*s5*s6)/25.));
  J[0][3] = (-c1*(s2*(s4*((4*c6)/25. + 3/10.) - (9*c4)/200. + (4*c4*c5*s6)/25.)
		 - c2*c3*((9*s4)/200. + c4*((4*c6)/25. + 3/10.) - (4*c5*s4*s6)/25.))
	    - s1*s3*((9*s4)/200. + c4*((4*c6)/25. + 3/10.) - (4*c5*s4*s6)/25.));
  J[0][4] = (-s1*((4*c3*c5*s6)/25. - (4*c4*s3*s5*s6)/25.) - c1*(c2*((4*c5*s3*s6)/25. + (4*c3*c4*s5*s6)/25.)
							       - (4*s2*s4*s5*s6)/25.));
  J[0][5] = (s1*(s3*((4*s4*s6)/25. - (4*c4*c5*c6)/25.) - (4*c3*c6*s5)/25.)
	    - c1*(s2*((4*c4*s6)/25. + (4*c5*c6*s4)/25.) + c2*(c3*((4*s4*s6)/25. - (4*c4*c5*c6)/25.)
							      + (4*c6*s3*s5)/25.)));
  J[0][6] = 0;

  J[1][0] = 0;
  J[1][1] = (-c2*((9*c3)/200. + c3*(s4*((4*c6)/25. + 3/10.) - (9*c4)/200. + (4*c4*c5*s6)/25.) - (4*s3*s5*s6)/25.)
	    - s2*((9*s4)/200. + c4*((4*c6)/25. + 3/10.) - (4*c5*s4*s6)/25. + 11/20.));
  J[1][2] = (s2*((9*s3)/200. + s3*(s4*((4*c6)/25. + 3/10.) - (9*c4)/200. + (4*c4*c5*s6)/25.) + (4*c3*s5*s6)/25.));
  J[1][3] = (-c2*(s4*((4*c6)/25. + 3/10.) - (9*c4)/200. + (4*c4*c5*s6)/25.)
	    - c3*s2*((9*s4)/200. + c4*((4*c6)/25. + 3/10.) - (4*c5*s4*s6)/25.));
  J[1][4] = (s2*((4*c5*s3*s6)/25. + (4*c3*c4*s5*s6)/25.) + (4*c2*s4*s5*s6)/25.);
  J[1][5] = (s2*(c3*((4*s4*s6)/25. - (4*c4*c5*c6)/25.) + (4*c6*s3*s5)/25.) - c2*((4*c4*s6)/25. + (4*c5*c6*s4)/25.));
  J[1][6] = 0;

  J[2][0] = (s1*((9*s3)/200. + s3*(s4*((4*c6)/25. + 3/10.) - (9*c4)/200. + (4*c4*c5*s6)/25.) + (4*c3*s5*s6)/25.)
	    - c1*(c2*((9*c3)/200. + c3*(s4*((4*c6)/25. + 3/10.) - (9*c4)/200. + (4*c4*c5*s6)/25.)
		      - (4*s3*s5*s6)/25.) + s2*((9*s4)/200. + c4*((4*c6)/25. + 3/10.) - (4*c5*s4*s6)/25. + 11/20.)));
  J[2][1] = (s1*(s2*((9*c3)/200. + c3*(s4*((4*c6)/25. + 3/10.) - (9*c4)/200. + (4*c4*c5*s6)/25.) - (4*s3*s5*s6)/25.)
		- c2*((9*s4)/200. + c4*((4*c6)/25. + 3/10.) - (4*c5*s4*s6)/25. + 11/20.)));
  J[2][2] = (c2*s1*((9*s3)/200. + s3*(s4*((4*c6)/25. + 3/10.) - (9*c4)/200. + (4*c4*c5*s6)/25.) + (4*c3*s5*s6)/25.)
	    - c1*((9*c3)/200. + c3*(s4*((4*c6)/25. + 3/10.) - (9*c4)/200. + (4*c4*c5*s6)/25.) - (4*s3*s5*s6)/25.));
  J[2][3] = (s1*(s2*(s4*((4*c6)/25. + 3/10.) - (9*c4)/200. + (4*c4*c5*s6)/25.)
		- c2*c3*((9*s4)/200. + c4*((4*c6)/25. + 3/10.) - (4*c5*s4*s6)/25.))
	    - c1*s3*((9*s4)/200. + c4*((4*c6)/25. + 3/10.) - (4*c5*s4*s6)/25.));
  J[2][4] = (s1*(c2*((4*c5*s3*s6)/25. + (4*c3*c4*s5*s6)/25.) - (4*s2*s4*s5*s6)/25.)
	    - c1*((4*c3*c5*s6)/25. - (4*c4*s3*s5*s6)/25.));
  J[2][5] = (c1*(s3*((4*s4*s6)/25. - (4*c4*c5*c6)/25.) - (4*c3*c6*s5)/25.)
	    + s1*(s2*((4*c4*s6)/25. + (4*c5*c6*s4)/25.)
		  + c2*(c3*((4*s4*s6)/25. - (4*c4*c5*c6)/25.) + (4*c6*s3*s5)/25.)));
  J[2][6] = 0;

  J[3][0] = (c1*((9*s3)/200. + s3*(s4*((4*c6)/25. + 3/10.) - (9*c4)/200. + (4*c4*c5*s6)/25.)
		+ (4*c3*s5*s6)/25.) + s1*(c2*((9*c3)/200. + c3*(s4*((4*c6)/25. + 3/10.) - (9*c4)/200.
								+ (4*c4*c5*s6)/25.) - (4*s3*s5*s6)/25.)
					  + s2*((9*s4)/200. + c4*((4*c6)/25. + 3/10.) - (4*c5*s4*s6)/25. + 11/20.))
	    - c1*((9*s3)/200. - s3*((9*c4)/200. + c4*(s5*s7 - c5*((4*s6)/25. + c6*c7))
				    - s4*((4*c6)/25. - c7*s6 + 3/10.)) + c3*(c5*s7 + s5*((4*s6)/25. + c6*c7)))
	    - s1*(s2*((9*s4)/200. + s4*(s5*s7 - c5*((4*s6)/25. + c6*c7)) + c4*((4*c6)/25. - c7*s6 + 3/10.) + 11/20.)
		  - c2*(s3*(c5*s7 + s5*((4*s6)/25. + c6*c7)) - (9*c3)/200.
			+ c3*((9*c4)/200. + c4*(s5*s7 - c5*((4*s6)/25. + c6*c7))
			      - s4*((4*c6)/25. - c7*s6 + 3/10.)))));
  J[3][1] = (c1*(s2*((9*c3)/200. + c3*(s4*((4*c6)/25. + 3/10.) - (9*c4)/200. + (4*c4*c5*s6)/25.)
		    - (4*s3*s5*s6)/25.) - c2*((9*s4)/200. + c4*((4*c6)/25. + 3/10.) - (4*c5*s4*s6)/25. + 11/20.))
	    + c1*(c2*((9*s4)/200. + s4*(s5*s7 - c5*((4*s6)/25. + c6*c7)) + c4*((4*c6)/25. - c7*s6 + 3/10.) + 11/20.)
		  + s2*(s3*(c5*s7 + s5*((4*s6)/25. + c6*c7)) - (9*c3)/200.
			+ c3*((9*c4)/200. + c4*(s5*s7 - c5*((4*s6)/25. + c6*c7))
			      - s4*((4*c6)/25. - c7*s6 + 3/10.)))));
  J[3][2] = (s1*((9*c3)/200. + c3*(s4*((4*c6)/25. + 3/10.) - (9*c4)/200. + (4*c4*c5*s6)/25.) - (4*s3*s5*s6)/25.)
	    + s1*(s3*(c5*s7 + s5*((4*s6)/25. + c6*c7)) - (9*c3)/200.
		  + c3*((9*c4)/200. + c4*(s5*s7 - c5*((4*s6)/25. + c6*c7)) - s4*((4*c6)/25. - c7*s6 + 3/10.)))
	    - c1*c2*((9*s3)/200. - s3*((9*c4)/200. + c4*(s5*s7 - c5*((4*s6)/25. + c6*c7))
				       - s4*((4*c6)/25. - c7*s6 + 3/10.)) + c3*(c5*s7 + s5*((4*s6)/25. + c6*c7)))
	    + c1*c2*((9*s3)/200. + s3*(s4*((4*c6)/25. + 3/10.) - (9*c4)/200. + (4*c4*c5*s6)/25.) + (4*c3*s5*s6)/25.));

  J[3][3] = c1*(s2*(s4*((4*c6)/25. + 3/10.) - (9*c4)/200. + (4*c4*c5*s6)/25.) - c2*c3*((9*s4)/200. + c4*((4*c6)/25. + 3/10.) - (4*c5*s4*s6)/25.)) + c1*(s2*((9*c4)/200. + c4*(s5*s7 - c5*((4*s6)/25. + c6*c7)) - s4*((4*c6)/25. - c7*s6 + 3/10.)) + c2*c3*((9*s4)/200. + s4*(s5*s7 - c5*((4*s6)/25. + c6*c7)) + c4*((4*c6)/25. - c7*s6 + 3/10.))) + s1*s3*((9*s4)/200. + c4*((4*c6)/25. + 3/10.) - (4*c5*s4*s6)/25.) - s1*s3*((9*s4)/200. + s4*(s5*s7 - c5*((4*s6)/25. + c6*c7)) + c4*((4*c6)/25. - c7*s6 + 3/10.));

  J[3][4] = c1*(c2*(s3*(s5*s7 - c5*((4*s6)/25. + c6*c7)) - c3*c4*(c5*s7 + s5*((4*s6)/25. + c6*c7))) + s2*s4*(c5*s7 + s5*((4*s6)/25. + c6*c7))) + s1*((4*c3*c5*s6)/25. - (4*c4*s3*s5*s6)/25.) + s1*(c3*(s5*s7 - c5*((4*s6)/25. + c6*c7)) + c4*s3*(c5*s7 + s5*((4*s6)/25. + c6*c7))) + c1*(c2*((4*c5*s3*s6)/25. + (4*c3*c4*s5*s6)/25.) - (4*s2*s4*s5*s6)/25.);

  J[3][5] = s1*(s3*(s4*((4*s6)/25. + c6*c7) - c4*c5*((4*c6)/25. - c7*s6)) - c3*s5*((4*c6)/25. - c7*s6)) - c1*(s2*(c4*((4*s6)/25. + c6*c7) + c5*s4*((4*c6)/25. - c7*s6)) + c2*(c3*(s4*((4*s6)/25. + c6*c7) - c4*c5*((4*c6)/25. - c7*s6)) + s3*s5*((4*c6)/25. - c7*s6))) + c1*(s2*((4*c4*s6)/25. + (4*c5*c6*s4)/25.) + c2*(c3*((4*s4*s6)/25. - (4*c4*c5*c6)/25.) + (4*c6*s3*s5)/25.)) - s1*(s3*((4*s4*s6)/25. - (4*c4*c5*c6)/25.) - (4*c3*c6*s5)/25.);

  J[3][6] = s1*(s3*(c4*(c7*s5 + c5*c6*s7) - s4*s6*s7) - c3*(c5*c7 - c6*s5*s7)) + c1*(s2*(s4*(c7*s5 + c5*c6*s7) + c4*s6*s7) - c2*(s3*(c5*c7 - c6*s5*s7) + c3*(c4*(c7*s5 + c5*c6*s7) - s4*s6*s7)));

  J[4][0] = 0;

  J[4][1] = c2*((9*c3)/200. + c3*(s4*((4*c6)/25. + 3/10.) - (9*c4)/200. + (4*c4*c5*s6)/25.) - (4*s3*s5*s6)/25.) - s2*((9*s4)/200. + s4*(s5*s7 - c5*((4*s6)/25. + c6*c7)) + c4*((4*c6)/25. - c7*s6 + 3/10.) + 11/20.) + c2*(s3*(c5*s7 + s5*((4*s6)/25. + c6*c7)) - (9*c3)/200. + c3*((9*c4)/200. + c4*(s5*s7 - c5*((4*s6)/25. + c6*c7)) - s4*((4*c6)/25. - c7*s6 + 3/10.))) + s2*((9*s4)/200. + c4*((4*c6)/25. + 3/10.) - (4*c5*s4*s6)/25. + 11/20.);

  J[4][2] = s2*((9*s3)/200. - s3*((9*c4)/200. + c4*(s5*s7 - c5*((4*s6)/25. + c6*c7)) - s4*((4*c6)/25. - c7*s6 + 3/10.)) + c3*(c5*s7 + s5*((4*s6)/25. + c6*c7))) - s2*((9*s3)/200. + s3*(s4*((4*c6)/25. + 3/10.) - (9*c4)/200. + (4*c4*c5*s6)/25.) + (4*c3*s5*s6)/25.);

  J[4][3] = c2*(s4*((4*c6)/25. + 3/10.) - (9*c4)/200. + (4*c4*c5*s6)/25.) + c2*((9*c4)/200. + c4*(s5*s7 - c5*((4*s6)/25. + c6*c7)) - s4*((4*c6)/25. - c7*s6 + 3/10.)) + c3*s2*((9*s4)/200. + c4*((4*c6)/25. + 3/10.) - (4*c5*s4*s6)/25.) - c3*s2*((9*s4)/200. + s4*(s5*s7 - c5*((4*s6)/25. + c6*c7)) + c4*((4*c6)/25. - c7*s6 + 3/10.));

  J[4][4] = c2*s4*(c5*s7 + s5*((4*s6)/25. + c6*c7)) - s2*(s3*(s5*s7 - c5*((4*s6)/25. + c6*c7)) - c3*c4*(c5*s7 + s5*((4*s6)/25. + c6*c7))) - s2*((4*c5*s3*s6)/25. + (4*c3*c4*s5*s6)/25.) - (4*c2*s4*s5*s6)/25.;

  J[4][5] = s2*(c3*(s4*((4*s6)/25. + c6*c7) - c4*c5*((4*c6)/25. - c7*s6)) + s3*s5*((4*c6)/25. - c7*s6)) + c2*((4*c4*s6)/25. + (4*c5*c6*s4)/25.) - c2*(c4*((4*s6)/25. + c6*c7) + c5*s4*((4*c6)/25. - c7*s6)) - s2*(c3*((4*s4*s6)/25. - (4*c4*c5*c6)/25.) + (4*c6*s3*s5)/25.);

  J[4][6] = s2*(s3*(c5*c7 - c6*s5*s7) + c3*(c4*(c7*s5 + c5*c6*s7) - s4*s6*s7)) + c2*(s4*(c7*s5 + c5*c6*s7) + c4*s6*s7);


  J[5][0] = c1*(c2*((9*c3)/200. + c3*(s4*((4*c6)/25. + 3/10.) - (9*c4)/200. + (4*c4*c5*s6)/25.) - (4*s3*s5*s6)/25.) + s2*((9*s4)/200. + c4*((4*c6)/25. + 3/10.) - (4*c5*s4*s6)/25. + 11/20.)) - s1*((9*s3)/200. + s3*(s4*((4*c6)/25. + 3/10.) - (9*c4)/200. + (4*c4*c5*s6)/25.) + (4*c3*s5*s6)/25.) + s1*((9*s3)/200. - s3*((9*c4)/200. + c4*(s5*s7 - c5*((4*s6)/25. + c6*c7)) - s4*((4*c6)/25. - c7*s6 + 3/10.)) + c3*(c5*s7 + s5*((4*s6)/25. + c6*c7))) - c1*(s2*((9*s4)/200. + s4*(s5*s7 - c5*((4*s6)/25. + c6*c7)) + c4*((4*c6)/25. - c7*s6 + 3/10.) + 11/20.) - c2*(s3*(c5*s7 + s5*((4*s6)/25. + c6*c7)) - (9*c3)/200. + c3*((9*c4)/200. + c4*(s5*s7 - c5*((4*s6)/25. + c6*c7)) - s4*((4*c6)/25. - c7*s6 + 3/10.))));

  J[5][1] = -s1*(s2*((9*c3)/200. + c3*(s4*((4*c6)/25. + 3/10.) - (9*c4)/200. + (4*c4*c5*s6)/25.) - (4*s3*s5*s6)/25.) - c2*((9*s4)/200. + c4*((4*c6)/25. + 3/10.) - (4*c5*s4*s6)/25. + 11/20.)) - s1*(c2*((9*s4)/200. + s4*(s5*s7 - c5*((4*s6)/25. + c6*c7)) + c4*((4*c6)/25. - c7*s6 + 3/10.) + 11/20.) + s2*(s3*(c5*s7 + s5*((4*s6)/25. + c6*c7)) - (9*c3)/200. + c3*((9*c4)/200. + c4*(s5*s7 - c5*((4*s6)/25. + c6*c7)) - s4*((4*c6)/25. - c7*s6 + 3/10.))));

  J[5][2] = c1*((9*c3)/200. + c3*(s4*((4*c6)/25. + 3/10.) - (9*c4)/200. + (4*c4*c5*s6)/25.) - (4*s3*s5*s6)/25.) + c1*(s3*(c5*s7 + s5*((4*s6)/25. + c6*c7)) - (9*c3)/200. + c3*((9*c4)/200. + c4*(s5*s7 - c5*((4*s6)/25. + c6*c7)) - s4*((4*c6)/25. - c7*s6 + 3/10.))) + c2*s1*((9*s3)/200. - s3*((9*c4)/200. + c4*(s5*s7 - c5*((4*s6)/25. + c6*c7)) - s4*((4*c6)/25. - c7*s6 + 3/10.)) + c3*(c5*s7 + s5*((4*s6)/25. + c6*c7))) - c2*s1*((9*s3)/200. + s3*(s4*((4*c6)/25. + 3/10.) - (9*c4)/200. + (4*c4*c5*s6)/25.) + (4*c3*s5*s6)/25.);

 J[5][3] = c1*s3*((9*s4)/200. + c4*((4*c6)/25. + 3/10.) - (4*c5*s4*s6)/25.) - s1*(s2*((9*c4)/200. + c4*(s5*s7 - c5*((4*s6)/25. + c6*c7)) - s4*((4*c6)/25. - c7*s6 + 3/10.)) + c2*c3*((9*s4)/200. + s4*(s5*s7 - c5*((4*s6)/25. + c6*c7)) + c4*((4*c6)/25. - c7*s6 + 3/10.))) - s1*(s2*(s4*((4*c6)/25. + 3/10.) - (9*c4)/200. + (4*c4*c5*s6)/25.) - c2*c3*((9*s4)/200. + c4*((4*c6)/25. + 3/10.) - (4*c5*s4*s6)/25.)) - c1*s3*((9*s4)/200. + s4*(s5*s7 - c5*((4*s6)/25. + c6*c7)) + c4*((4*c6)/25. - c7*s6 + 3/10.));

 J[5][4] = c1*((4*c3*c5*s6)/25. - (4*c4*s3*s5*s6)/25.) - s1*(c2*(s3*(s5*s7 - c5*((4*s6)/25. + c6*c7)) - c3*c4*(c5*s7 + s5*((4*s6)/25. + c6*c7))) + s2*s4*(c5*s7 + s5*((4*s6)/25. + c6*c7))) + c1*(c3*(s5*s7 - c5*((4*s6)/25. + c6*c7)) + c4*s3*(c5*s7 + s5*((4*s6)/25. + c6*c7))) - s1*(c2*((4*c5*s3*s6)/25. + (4*c3*c4*s5*s6)/25.) - (4*s2*s4*s5*s6)/25.);

 J[5][5] = c1*(s3*(s4*((4*s6)/25. + c6*c7) - c4*c5*((4*c6)/25. - c7*s6)) - c3*s5*((4*c6)/25. - c7*s6)) + s1*(s2*(c4*((4*s6)/25. + c6*c7) + c5*s4*((4*c6)/25. - c7*s6)) + c2*(c3*(s4*((4*s6)/25. + c6*c7) - c4*c5*((4*c6)/25. - c7*s6)) + s3*s5*((4*c6)/25. - c7*s6))) - c1*(s3*((4*s4*s6)/25. - (4*c4*c5*c6)/25.) - (4*c3*c6*s5)/25.) - s1*(s2*((4*c4*s6)/25. + (4*c5*c6*s4)/25.) + c2*(c3*((4*s4*s6)/25. - (4*c4*c5*c6)/25.) + (4*c6*s3*s5)/25.));

 J[5][6] = c1*(s3*(c4*(c7*s5 + c5*c6*s7) - s4*s6*s7) - c3*(c5*c7 - c6*s5*s7)) - s1*(s2*(s4*(c7*s5 + c5*c6*s7) + c4*s6*s7) - c2*(s3*(c5*c7 - c6*s5*s7) + c3*(c4*(c7*s5 + c5*c6*s7) - s4*s6*s7)));

 return J;
}


double *paddle_to_joints_displacement(double *joint_angles, double *dp)
{
  double **J = paddle_jacobian(joint_angles);

  double *dj;
  safe_calloc(dj, 7, double);
  memcpy(dj, dp, 6*sizeof(double));

  LAPACKE_dgels(LAPACK_ROW_MAJOR, 'N', 6, 7, 1, J[0], 7, dj, 1);

  free_matrix2(J);

  return dj;
}


double *paddle_to_joints_displacement_weighted(double *joint_angles, double *dp, double *w)
{
  double **J = paddle_jacobian(joint_angles);

  int i,j;
  for (i = 0; i < 6; i++) {
    for (j = 0; j < 7; j++) {
      J[i][j] *= w[j];
    }
  }

  double *dj;
  safe_calloc(dj, 7, double);
  memcpy(dj, dp, 6*sizeof(double));

  LAPACKE_dgels(LAPACK_ROW_MAJOR, 'N', 6, 7, 1, J[0], 7, dj, 1);

  free_matrix2(J);

  for (j = 0; j < 7; j++)
    dj[j] *= w[j];

  return dj;
}


