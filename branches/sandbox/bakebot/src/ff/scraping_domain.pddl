(define (domain scrape-ingreds)
	(:predicates (GRIPPER ?x) 
				 (MIXING-BOWL ?x) 
				 (SPATULA-GRIPPER ?x)
                 (COOKIE-SHEET ?x)
				 (carry ?x ?y)
				 (free ?x)
				 (over-cs ?x)
				 (reset-safe ?x)
				 (on-table ?x)
				 (in-transit ?x)
                 (done ?x)
				 (in-mb ?x)
                 (out-of-way ?x)
				 (cs-zone ?x)
				 (scraped ?x)
				 (randomp ?x)
				 (inverted ?x)
				 (poured-out ?x)
				 (reset ?x)
				 (cardinal ?x))
	(:action grab-mb 
		:parameters (?x ?y)
		:precondition (and (MIXING-BOWL ?x) 
						   (GRIPPER ?y) 
						   (not (SPATULA-GRIPPER ?y))
						   (reset ?y)
						   (free ?y))
		:effect (and (carry ?y ?x) 
					 (not (free ?y))
					 (not (reset ?y))
					 (not (reset-safe ?y))))
	(:action lift 
		:parameters (?x ?y) 
		:precondition (and (MIXING-BOWL ?x) (GRIPPER ?y) 
						   (carry ?y ?x))
		:effect (and (in-transit ?x)
					 (not (on-table ?x))
					 (randomp ?x)))
	(:action rotate-to-known
		:parameters (?x ?y) 
		:precondition (and (MIXING-BOWL ?x) (GRIPPER ?y) 
						   (carry ?y ?x))
		:effect (and (not (randomp ?x))
					 (cardinal ?x)))
	(:action servo-to-cs
		:parameters (?x ?y)
		:precondition (and (COOKIE-SHEET ?x) (MIXING-BOWL ?y)
                           (not (cs-zone ?x))
                           (out-of-way ?y))
		:effect (cs-zone ?x))
	(:action servo-from-cs
		:parameters (?x)
		:precondition (and (COOKIE-SHEET ?x)
                           (cs-zone ?x))
		:effect (not (cs-zone ?x)))
	(:action transit-aside
		:parameters (?x ?y) 
		:precondition (and (MIXING-BOWL ?x) (GRIPPER ?y) 
						   (carry ?y ?x)
						   (in-transit ?x))
		:effect (and (out-of-way ?x)))
	(:action transit
		:parameters (?x ?y ?z) 
		:precondition (and (MIXING-BOWL ?x) (GRIPPER ?y) (COOKIE-SHEET ?z) 
						   (carry ?y ?x)
                           (cs-zone ?z)
                           (not (poured-out ?x))
						   (in-transit ?x))
		:effect (and (over-cs ?x)))
	(:action pour
		:parameters (?x ?y) 
		:precondition (and (MIXING-BOWL ?x) (GRIPPER ?y)
						   (carry ?y ?x)
						   (in-transit ?x)
						   (over-cs ?x)
						   (cardinal ?x))
		:effect (and (inverted ?x)
					 (poured-out ?x)))
	(:action transit-spoon
		:parameters (?y ?x)
		:precondition (and (GRIPPER ?y) 
                           (MIXING-BOWL ?x)
						   (SPATULA-GRIPPER ?y)
                           (poured-out ?x))
		:effect (and (over-cs ?y)
					 (not (reset ?y))
					 (not (reset-safe ?y))))
	(:action plunge-spoon
		:parameters (?y)
		:precondition (and (GRIPPER ?y) 
						   (SPATULA-GRIPPER ?y)
						   (over-cs ?y))
		:effect (and (not (over-cs ?y))
					 (in-mb ?y)))
	(:action scrape
		:parameters (?left ?right ?mb)
		:precondition (and (GRIPPER ?left) 
						   (not (SPATULA-GRIPPER ?left))
						   (GRIPPER ?right)
						   (SPATULA-GRIPPER ?right)
						   (MIXING-BOWL ?mb)
						   (carry ?left ?mb)
						   (in-mb ?right))
		:effect (scraped ?mb))
	(:action deplunge-spoon
		:parameters (?y)
		:precondition (and (GRIPPER ?y) 
						   (SPATULA-GRIPPER ?y)
						   (in-mb ?y))
		:effect (and (not (in-mb ?y))
					 (over-cs ?y)))
	(:action retreat-spoon
		:parameters (?y)
		:precondition (and (GRIPPER ?y) 
						   (SPATULA-GRIPPER ?y))
		:effect (and (not (over-cs ?y))
                     (free ?y)
					 (reset-safe ?y)))
	(:action revert
		:parameters (?x ?y) 
		:precondition (and (MIXING-BOWL ?x) (GRIPPER ?y) 
						   (carry ?y ?x)
						   (in-transit ?x))
		:effect (and (not (inverted ?x))
					 (cardinal ?x)))
	(:action dump
		:parameters (?x ?y) 
		:precondition (and (MIXING-BOWL ?x) (GRIPPER ?y) 
						   (carry ?y ?x)
						   (in-transit ?x))
		:effect (and (done ?x)
					 (not (carry ?y ?x))
					 (not (in-transit ?x))
                     (reset-safe ?y)
					 (free ?y)))
	(:action reset-arm
		:parameters (?x)
		:precondition (and (GRIPPER ?x)
                           (reset-safe ?x)
						   (free ?x))
		:effect (reset ?x))
)
