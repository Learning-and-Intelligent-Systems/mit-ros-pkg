[object_survey/ScanAnalysis]:
#this message is for storing the analysis of a scan
#it is mostly used for debugging, to save partially analyzed data
#raw cloud, in PointXYZWithViewpoint form:
sensor_msgs/PointCloud2 cloud_vp
#cloud with normals:
sensor_msgs/PointCloud2 normal_cloud
#filtered cloud with normals:
sensor_msgs/PointCloud2 normal_cloud_filtered
# aligned cloud:
sensor_msgs/PointCloud2 normal_cloud_aligned

#original transforms:
geometry_msgs/TransformStamped laser_transform
geometry_msgs/TransformStamped camera_transform
geometry_msgs/TransformStamped base_transform

#aligned transform:
geometry_msgs/TransformStamped laser_aligned
geometry_msgs/TransformStamped camera_aligned
geometry_msgs/TransformStamped base_aligned

#raw images:
sensor_msgs/Image[] images
#sift features corresponding to the images:
posedetection_msgs/Feature0D[] sift_features


#sift features determined to be "good"
posedetection_msgs/Feature0D good_features


sensor_msgs/CameraInfo caminfo
geometry_msgs/Pose object_pose
================================================================================
MSG: sensor_msgs/PointCloud2
#This message holds a collection of nD points, as a binary blob.
Header header

# 2D structure of the point cloud. If the cloud is unordered,
# height is 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if the data is dense (i.e., image-like organized)

================================================================================
MSG: roslib/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: sensor_msgs/PointField
#This message holds the description of one point entry in the PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration see above
uint32 count     # How many elements in field

================================================================================
MSG: geometry_msgs/TransformStamped
# This expresses a transform from coordinate frame header.frame_id
# to the coordinate frame child_frame_id
#
# This message is mostly used by the 
# <a href="http://www.ros.org/wiki/tf">tf</a> package. 
# See it's documentation for more information.

Header header
string child_frame_id # the frame id of the child frame
Transform transform

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of cameara
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in src/image_encodings.cpp

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: posedetection_msgs/Feature0D
Header header
float32[] positions # 2*N, 0-indexed
float32[] scales # N, optional
float32[] orientations # N, optional, along +X is 0
float32[] confidences
float32[] descriptors # N*descriptor_dim
int32 descriptor_dim
string type # type of feature

================================================================================
MSG: sensor_msgs/CameraInfo
# This message defines meta information for a camera. It should be in a
# camera namespace and accompanied by up to 5 image topics named:
# 
# image_raw, image, image_color, image_rect, and image_rect_color
#
# The meaning of the camera parameters are described in detail at
# http://pr.willowgarage.com/wiki/camera_calibration.

##########################
# Image acquisition info #
##########################

# Time of image acquisition, camera coordinate frame ID
Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of camera
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image

# Camera resolution in pixels
uint32 height
uint32 width

# Region of interest (subwindow of full camera resolution), if applicable
RegionOfInterest roi

##########################################
# Internal parameters                    #
# Used for warping to:                   #
#  1. An undistorted image (just D and K)#
#  2. A rectified image (D, K, R)        #
# Users should not normally need these   #
##########################################

# Distortion parameters: k1, k2, t1, t2, k3
# These model radial and tangential distortion of the camera.
float64[5]  D # 5x1 vector

# Intrinsic camera matrix for the raw (distorted) images
# Projects 3D points in the camera coordinate frame to 2D pixel
# coordinates using the focal lengths (fx, fy) and principal point
# (cx, cy):
#     [fx  0 cx]
# K = [ 0 fy cy]
#     [ 0  0  1]

float64[9]  K # 3x3 row-major matrix


# Rectification matrix (stereo cameras only)
# A homography which takes an image to the ideal stereo image plane
# so that epipolar lines in both stereo images are parallel.
float64[9]  R # 3x3 row-major matrix

######################################
# Projection/camera matrix           #
# This is a 3x4 projection matrix    #
#   for going from 3D to 2D coords   #
######################################

# Projection/camera matrix
# By convention, this matrix specifies the intrinsic (camera)
#   matrix of the processed (rectified) image.
# Upper 3x3 portion is the normal camera intrinsic matrix for
#   the rectified image
# Projects 3D points in the camera coordinate frame to 2D pixel
# coordinates using the focal lengths (fx, fy) and principal point
# (cx, cy):
#              [fx  0 cx]
# P[1:3,1:3] = [ 0 fy cy]
#              [ 0  0  1]
# For the right camera of a stereo pair, P[4,1] is the position
#  of the right camera center in the left camera's frame, times
#  the focal length fx.
# 
# Given a 3D point q=[XYZ]^T in the left camera frame, the projection
#  of the point onto the image is given by [uvw]^T = Pq, with x=u/w and y=v/w.
#  This holds for both left and right images of a stereo pair.  
#  For monocular cameras and the left image of a stereo pair, P[4,1] is always 0.

float64[12] P # 3x4 row-major matrix

================================================================================
MSG: sensor_msgs/RegionOfInterest
# This message is used to specify a region of interest within an image
#
# When used to specify the ROI setting of the camera when the image was taken,
# the height and width fields should either match the height and width
# fields for the associated image or be zeroes to indicate that the full image
# was captured

uint32 x_offset  #Leftmost pixel of the ROI (0 if the left edge of the image is included in the ROI)
uint32 y_offset  #Topmost pixel of the ROI (0 if the top edge of the image is included in the ROI)
uint32 height    #Height of ROI
uint32 width     #Width of ROI

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z


